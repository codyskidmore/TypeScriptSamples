const isAdminRole = true;
const user = 'Cody';
let welcome = `Hello ${user}`;
if (!isAdminRole) {
    welcome = `{$user} is not an admin`;
}
console.log(welcome);
const isAdmin = true; // "true" causes type check warning
const age = 33;
const hexadecimal = 0xa00f;
const binary = 0b1100;
const myString = "my string"; // or 'my string'
// arrays
const numbers = [0, 1, 2]; // numbers.push("test"); type check error
numbers.push(3);
const strings = ["test", "test1"];
const numbers2 = [0, 1];
// Union type array
//const mixed: (number,string)[] =  [1,"test",2,"test2"]; This appears to not be valid syntax.
const mixed = [1, "test", 3, "test2"];
mixed.push(2); // mixed.push(true) -- type check error.
// Tuple
let mix = ["test1", 0];
mix[0] = "test";
mix[1] = 1;
mix[1].toFixed();
// enum
var UserType;
// enum
(function (UserType) {
    UserType[UserType["SuperUser"] = 0] = "SuperUser";
    UserType[UserType["Admin"] = 1] = "Admin";
    UserType[UserType["Manager"] = 2] = "Manager";
    UserType[UserType["User"] = 3] = "User";
})(UserType || (UserType = {}));
;
let userType = UserType.Admin;
console.log(UserType[userType]);
console.log(userType);
// any data type. Works but dangerous.
const data = "4";
const mix2 = [1, 'test', false];
const numbers3 = [0, 1, 2, 3];
const greaterThanTwo = numbers3.filter(n => n > 2);
console.log(greaterThanTwo);
function greet2(name, age) {
    return `Hello ${name}. Your age is ${age}.`;
}
let myUser = {
    name: "Bob",
    age: 33
};
let hello = function (name, lang) {
    if (lang === 'en') {
        return `Hello ${name}.`;
    }
    return `Hola ${name}.`;
};
console.log(hello('Bob', 'en'));
let userX = { name: "bob", age: 31, address: "main street" };
function error() {
    throw new Error('Error');
}
function fail() {
    error();
}
const users = [
    {
        name: "James",
        age: 30
    },
    {
        name: "Bob",
        age: 31
    }
];
System.register("types", [], function (exports_1, context_1) {
    "use strict";
    var myUser;
    var __moduleName = context_1 && context_1.id;
    return {
        setters: [],
        execute: function () {
            myUser = {
                name: "Cody",
                age: 34
            };
        }
    };
});
System.register("type_assertion", [], function (exports_2, context_2) {
    "use strict";
    var myUser;
    var __moduleName = context_2 && context_2.id;
    return {
        setters: [],
        execute: function () {
            myUser = {};
            myUser.age = 35;
            myUser.name = 'Cody';
            myUser.age = 35;
        }
    };
});
let test = undefined;
let test2 = null;
// Exception
let testNum = 1;
//testNum = null; strictNullChecks turned on causes an error
System.register("utils", [], function (exports_3, context_3) {
    "use strict";
    var pi;
    var __moduleName = context_3 && context_3.id;
    return {
        setters: [],
        execute: function () {
            exports_3("pi", pi = 3.14);
        }
    };
});
function greet(name) {
    console.log(`Hello ${name}!`);
    // return ""; causes a type error.
}
